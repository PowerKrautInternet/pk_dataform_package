name: Publish package to GitHub Packages

on:
  pull_request_review:
    types: [submitted]

jobs:
  build:
    if: github.event.review.state == 'approved'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@PowerkrautStijn'

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Install dependencies
        run: npm ci

      - name: Get PR base branch
        id: pr
        run: |
          PR_DATA=$(curl -s \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }})
          echo "base_ref=$(echo $PR_DATA | jq -r '.base.ref')" >> $GITHUB_OUTPUT
          echo "head_ref=$(echo $PR_DATA | jq -r '.head.ref')" >> $GITHUB_OUTPUT

      - name: Exit if not targeting main
        if: steps.pr.outputs.base_ref != 'main'
        run: |
          echo "❌ PR is not targeting main. Skipping publish."
          exit 0

      - name: Configure Git
        run: |
          git config user.name "PowerkrautStijn"
          git config user.email "stijn@powerkraut.nl"

      - name: Set version from PR labels
        id: versioning
        run: |
          LABELS=$(curl -s \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/labels \
            | jq -r '.[].name')

          if echo "$LABELS" | grep -q "Major"; then
            npm version major --no-git-tag-version
            echo "Applied major version bump"
          elif echo "$LABELS" | grep -q "Minor"; then
            npm version minor --no-git-tag-version
            echo "Applied minor version bump"
          elif echo "$LABELS" | grep -q "Patch"; then
            npm version patch --no-git-tag-version
            echo "Applied patch version bump"
          else
            echo "❌ No valid version label (Major/Minor/Patch) found. Exiting."
            exit 1
          fi

      - name: Commit updated version (if needed)
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            git commit -am "chore: bump version based on release label"
            git push origin HEAD:refs/heads/${{ steps.pr.outputs.head_ref }}
          else
            echo "No changes to commit"
          fi

      - name: Create custom prefix tag
        run: |
          VERSION=$(node -p "require('./package.json').version")
          git tag release-$VERSION
          git push origin release-$VERSION

      - name: Publish to GitHub Packages
        run: npm publish --registry=https://npm.pkg.github.com/
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
